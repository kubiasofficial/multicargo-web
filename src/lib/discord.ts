// Discord webhook integration for MultiCargo
const DISCORD_WEBHOOK_URL = process.env.DISCORD_WEBHOOK_URL;
const DISCORD_CHANNEL_ID = '1418624695829532764';

export interface DiscordEmbedField {
  name: string;
  value: string;
  inline?: boolean;
}

export interface DiscordEmbed {
  title: string;
  description?: string;
  color: number;
  fields?: DiscordEmbedField[];
  timestamp?: string;
  footer?: {
    text: string;
  };
  thumbnail?: {
    url: string;
  };
}

export interface DiscordWebhookPayload {
  username?: string;
  avatar_url?: string;
  content?: string;
  embeds?: DiscordEmbed[];
}

/**
 * Send ride start notification to Discord
 */
export async function sendRideStartNotification(
  userName: string,
  trainNumber: string,
  route: string,
  trainImage?: string
): Promise<boolean> {
  const embed: DiscordEmbed = {
    title: 'üöÇ Nov√° j√≠zda zaƒçala!',
    description: `Strojvedouc√≠ **${userName}** zaƒçal j√≠zdu vlaku **${trainNumber}**`,
    color: 0x00ff00, // Green
    fields: [
      {
        name: 'üöÇ Vlak',
        value: trainNumber,
        inline: true
      },
      {
        name: 'üõ§Ô∏è Trasa',
        value: route,
        inline: true
      },
      {
        name: 'üë§ Strojvedouc√≠',
        value: userName,
        inline: true
      },
      {
        name: '‚è∞ ƒåas zah√°jen√≠',
        value: new Date().toLocaleString('cs-CZ'),
        inline: false
      }
    ],
    timestamp: new Date().toISOString(),
    footer: {
      text: 'MultiCargo - Spr√°va j√≠zd'
    }
  };

  if (trainImage) {
    embed.thumbnail = {
      url: trainImage
    };
  }

  return await sendDiscordWebhook({
    username: 'MultiCargo Bot',
    embeds: [embed]
  });
}

/**
 * Send ride end notification to Discord
 */
export async function sendRideEndNotification(
  userName: string,
  trainNumber: string,
  route: string,
  duration: number,
  delay: number,
  trainImage?: string
): Promise<boolean> {
  const embed: DiscordEmbed = {
    title: 'üèÅ J√≠zda dokonƒçena!',
    description: `Strojvedouc√≠ **${userName}** dokonƒçil j√≠zdu vlaku **${trainNumber}**`,
    color: delay > 5 ? 0xff9900 : 0x00ff00, // Orange if delayed, green if on time
    fields: [
      {
        name: 'üöÇ Vlak',
        value: trainNumber,
        inline: true
      },
      {
        name: 'üõ§Ô∏è Trasa',
        value: route,
        inline: true
      },
      {
        name: 'üë§ Strojvedouc√≠',
        value: userName,
        inline: true
      },
      {
        name: '‚è±Ô∏è Doba j√≠zdy',
        value: `${Math.floor(duration / 60)}h ${duration % 60}m`,
        inline: true
      },
      {
        name: delay > 0 ? '‚ö†Ô∏è Zpo≈ædƒõn√≠' : '‚úÖ Bez zpo≈ædƒõn√≠',
        value: delay > 0 ? `${delay} minut` : 'P≈ôesnƒõ na ƒças',
        inline: true
      },
      {
        name: '‚è∞ ƒåas dokonƒçen√≠',
        value: new Date().toLocaleString('cs-CZ'),
        inline: false
      }
    ],
    timestamp: new Date().toISOString(),
    footer: {
      text: 'MultiCargo - Spr√°va j√≠zd'
    }
  };

  if (trainImage) {
    embed.thumbnail = {
      url: trainImage
    };
  }

  return await sendDiscordWebhook({
    username: 'MultiCargo Bot',
    embeds: [embed]
  });
}

/**
 * Send emergency/incident notification to Discord
 */
export async function sendIncidentNotification(
  userName: string,
  trainNumber: string,
  incidentType: string,
  description: string
): Promise<boolean> {
  const embed: DiscordEmbed = {
    title: '‚ö†Ô∏è Incident bƒõhem j√≠zdy!',
    description: `Nahl√°≈°en incident bƒõhem j√≠zdy vlaku **${trainNumber}**`,
    color: 0xff0000, // Red
    fields: [
      {
        name: 'üöÇ Vlak',
        value: trainNumber,
        inline: true
      },
      {
        name: 'üë§ Strojvedouc√≠',
        value: userName,
        inline: true
      },
      {
        name: 'üö® Typ incidentu',
        value: incidentType,
        inline: true
      },
      {
        name: 'üìù Popis',
        value: description || 'Bez dal≈°√≠ch podrobnost√≠',
        inline: false
      },
      {
        name: '‚è∞ ƒåas nahl√°≈°en√≠',
        value: new Date().toLocaleString('cs-CZ'),
        inline: false
      }
    ],
    timestamp: new Date().toISOString(),
    footer: {
      text: 'MultiCargo - Syst√©m incident≈Ø'
    }
  };

  return await sendDiscordWebhook({
    username: 'MultiCargo Alert',
    embeds: [embed]
  });
}

/**
 * Send Discord webhook message
 */
async function sendDiscordWebhook(payload: DiscordWebhookPayload): Promise<boolean> {
  try {
    if (!DISCORD_WEBHOOK_URL) {
      console.warn('Discord webhook URL not configured');
      return false;
    }

    const response = await fetch(DISCORD_WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      console.error('Discord webhook failed:', response.status, response.statusText);
      return false;
    }

    console.log('Discord notification sent successfully');
    return true;
  } catch (error) {
    console.error('Error sending Discord webhook:', error);
    return false;
  }
}

/**
 * Test Discord webhook connection
 */
export async function testDiscordWebhook(): Promise<boolean> {
  return await sendDiscordWebhook({
    username: 'MultiCargo Test',
    content: 'üß™ Test zpr√°va z MultiCargo syst√©mu',
    embeds: [{
      title: 'Test notifikace',
      description: 'Pokud vid√≠te tuto zpr√°vu, Discord integrace funguje spr√°vnƒõ!',
      color: 0x0099ff,
      timestamp: new Date().toISOString(),
      footer: {
        text: 'MultiCargo - Test syst√©mu'
      }
    }]
  });
}

export default {
  sendRideStartNotification,
  sendRideEndNotification,
  sendIncidentNotification,
  testDiscordWebhook
};